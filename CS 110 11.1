# algorithm based on the pseudo code from Cromen et. al
# rod cutting problem using recurrence

import random

def cut_rod(p, n):
    if n == 0:
        return 0
    q = -1
    for i in range (n):
        q = max(q, p[i]+cut_rod(p, n-1-i))
    return q

prices = [1 ,5, 8, 9, 10, 17, 17, 20, 24, 30]
cut_rod(prices, 4)

# Rod cutting using dynamic programming
def EXTENDED_BOTTOM_UP_CUT_ROD(p, n):
    r, s = list(range(n+1)), list(range(n+1))
    r[0] = 0
    for j in range(1, n+1):
        q = 0
        for i in range(1, j+1):
            if q < p[i] + r[j-i]:
                q = p[i] + r[j-i]
                s[j] = i
        r[j] = q
    return r, s

prices = [0, 1 ,5, 8, 9, 10, 17, 17, 20, 24, 30]
EXTENDED_BOTTOM_UP_CUT_ROD(prices, 4)

def PRINT_CUT_ROD_SOLUTION(p, n):
    r, s = EXTENDED_BOTTOM_UP_CUT_ROD(p, n)
    while n > 0:
        print(s[n])
        n = n - s[n]

PRINT_CUT_ROD_SOLUTION(prices, 4)

# Plotting the graph for the running of the rod cut problem

import time
import random
import matplotlib.pyplot as plt

avrg_rec, l = [], []
for i in range (1, 20):
    p = sorted([random.randint(0, 50) for _ in range(5 + i)])
    l.append(len(p))
    start = time.time()
    cut_rod(p, len(p))
    end = time.time()
    avrg_rec.append(end - start)
# print(avrg_rec, '\n', l)

avrg_dyn, li = [], []
for i in range (1, 20):
    p = sorted([random.randint(0, 50) for _ in range(5 + i)])
    li.append(len(p))
    start = time.time()
    EXTENDED_BOTTOM_UP_CUT_ROD(p, len(p)-1)
    end = time.time()
    avrg_dyn.append(end - start)


plt.figure(figsize=(10, 8), dpi=80)
plt.plot(l, avrg_rec, label= "Recurrence") #, alpha=0.8, s=10, color = "purple")
plt.plot(li, avrg_dyn, label= "Dynamic")
plt.legend(loc=2)
plt.show()
